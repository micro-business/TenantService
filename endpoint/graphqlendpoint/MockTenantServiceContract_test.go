// Automatically generated by MockGen. DO NOT EDIT!
// Source: business/contract/TenantServiceContract.go

package graphqlendpoint_test

import (
	gomock "github.com/golang/mock/gomock"
	system "github.com/microbusinesslimited/Micro-Business-Core/system"
	domain "github.com/microbusinesslimited/TenantService/business/domain"
)

// Mock of TenantService interface
type MockTenantService struct {
	ctrl     *gomock.Controller
	recorder *_MockTenantServiceRecorder
}

// Recorder for MockTenantService (not exported)
type _MockTenantServiceRecorder struct {
	mock *MockTenantService
}

func NewMockTenantService(ctrl *gomock.Controller) *MockTenantService {
	mock := &MockTenantService{ctrl: ctrl}
	mock.recorder = &_MockTenantServiceRecorder{mock}
	return mock
}

func (_m *MockTenantService) EXPECT() *_MockTenantServiceRecorder {
	return _m.recorder
}

func (_m *MockTenantService) CreateTenant(tenant domain.Tenant) (system.UUID, error) {
	ret := _m.ctrl.Call(_m, "CreateTenant", tenant)
	ret0, _ := ret[0].(system.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTenantServiceRecorder) CreateTenant(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateTenant", arg0)
}

func (_m *MockTenantService) UpdateTenant(tenantID system.UUID, tenant domain.Tenant) error {
	ret := _m.ctrl.Call(_m, "UpdateTenant", tenantID, tenant)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTenantServiceRecorder) UpdateTenant(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateTenant", arg0, arg1)
}

func (_m *MockTenantService) ReadTenant(tenantID system.UUID) (domain.Tenant, error) {
	ret := _m.ctrl.Call(_m, "ReadTenant", tenantID)
	ret0, _ := ret[0].(domain.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTenantServiceRecorder) ReadTenant(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadTenant", arg0)
}

func (_m *MockTenantService) DeleteTenant(tenantID system.UUID) error {
	ret := _m.ctrl.Call(_m, "DeleteTenant", tenantID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTenantServiceRecorder) DeleteTenant(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteTenant", arg0)
}

func (_m *MockTenantService) CreateApplication(tenantID system.UUID, application domain.Application) (system.UUID, error) {
	ret := _m.ctrl.Call(_m, "CreateApplication", tenantID, application)
	ret0, _ := ret[0].(system.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTenantServiceRecorder) CreateApplication(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateApplication", arg0, arg1)
}

func (_m *MockTenantService) UpdateApplication(tenantID system.UUID, applicationID system.UUID, application domain.Application) error {
	ret := _m.ctrl.Call(_m, "UpdateApplication", tenantID, applicationID, application)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTenantServiceRecorder) UpdateApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateApplication", arg0, arg1, arg2)
}

func (_m *MockTenantService) ReadApplication(tenantID system.UUID, applicationID system.UUID) (domain.Application, error) {
	ret := _m.ctrl.Call(_m, "ReadApplication", tenantID, applicationID)
	ret0, _ := ret[0].(domain.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTenantServiceRecorder) ReadApplication(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadApplication", arg0, arg1)
}

func (_m *MockTenantService) ReadAllApplications(tenantID system.UUID) (map[system.UUID]domain.Application, error) {
	ret := _m.ctrl.Call(_m, "ReadAllApplications", tenantID)
	ret0, _ := ret[0].(map[system.UUID]domain.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTenantServiceRecorder) ReadAllApplications(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadAllApplications", arg0)
}

func (_m *MockTenantService) DeleteApplication(tenantID system.UUID, applicationID system.UUID) error {
	ret := _m.ctrl.Call(_m, "DeleteApplication", tenantID, applicationID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTenantServiceRecorder) DeleteApplication(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteApplication", arg0, arg1)
}
